import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { LocalDestination } from "@shared/schema";
import { Link, useLocation } from "wouter";
import { apiRequest } from "@/lib/queryClient";
import "./LocalDestinations.css";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { Separator } from "@/components/ui/separator";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Loader2, MapPin, Clock, Tag, DollarSign, Star as StarIcon, Plus, ListPlus, Check } from "lucide-react";
import { Label } from "@/components/ui/label";

export default function LocalDestinations() {
  const [location, setLocation] = useLocation();
  const queryClient = useQueryClient();
  const { toast } = useToast();
  
  const [activeTab, setActiveTab] = useState<string>("zipcode");
  const [zipCode, setZipCode] = useState<string>("");
  const [radius, setRadius] = useState<string>("25");
  const [selectedState, setSelectedState] = useState<string>("");
  const [selectedCategory, setSelectedCategory] = useState<string>("");
  
  // For the add to list functionality
  const [addToListId, setAddToListId] = useState<number | null>(null);
  const [selectedDestination, setSelectedDestination] = useState<LocalDestination | null>(null);
  const [isAddToListDialogOpen, setIsAddToListDialogOpen] = useState(false);
  
  // Check URL parameters on component mount
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const listIdParam = params.get('add-to-list');
    if (listIdParam) {
      setAddToListId(parseInt(listIdParam));
    }
  }, []);

  // Query for destinations based on active tab and search params
  const { data: destinations, isLoading, refetch } = useQuery<LocalDestination[]>({
    queryKey: ['/api/local-destinations', activeTab, zipCode, radius, selectedState, selectedCategory],
    queryFn: async () => {
      let url = '/api/local-destinations';
      const params = new URLSearchParams();
      
      if (activeTab === "zipcode" && zipCode) {
        params.append('zipCode', zipCode);
        params.append('radius', radius);
      } else if (activeTab === "state" && selectedState) {
        params.append('state', selectedState);
      } else if (activeTab === "category" && selectedCategory) {
        params.append('category', selectedCategory);
      }
      
      if (params.toString()) {
        url += `?${params.toString()}`;
      }
      
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error('Failed to fetch destinations');
      }
      return response.json();
    },
    enabled: false, // Don't run on component mount
  });

  const handleSearch = () => {
    if (activeTab === "zipcode" && (!zipCode || zipCode.length < 5)) {
      toast({
        title: "Invalid zip code",
        description: "Please enter a valid 5-digit US zip code",
        variant: "destructive",
      });
      return;
    }
    
    if (activeTab === "state" && !selectedState) {
      toast({
        title: "State required",
        description: "Please select a state",
        variant: "destructive",
      });
      return;
    }
    
    if (activeTab === "category" && !selectedCategory) {
      toast({
        title: "Category required",
        description: "Please select a category",
        variant: "destructive",
      });
      return;
    }
    
    refetch();
  };

  // Query for user lists - will need this for more advanced features
  const { data: userLists } = useQuery({
    queryKey: ['/api/user-destination-lists', 2],  // Default user ID is 2 (user1)
    queryFn: async () => {
      if (addToListId) {
        const response = await apiRequest('GET', `/api/user-destination-lists/${2}`);
        return await response.json();
      }
      return [];
    },
    enabled: !!addToListId,
  });

  // Add destination to list mutation
  const addToListMutation = useMutation({
    mutationFn: async ({ listId, destinationId }: { listId: number; destinationId: number }) => {
      const response = await apiRequest('POST', '/api/user-list-items', {
        listId,
        destinationId,
        order: 999, // Will be displayed at the end
        notes: null
      });
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user-list-items', addToListId] });
      toast({
        title: "Success!",
        description: "Destination added to your list.",
      });
      setIsAddToListDialogOpen(false);
    },
    onError: (error: Error) => {
      toast({
        title: "Error adding to list",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  const handleAddToList = (destinationId: number) => {
    if (!addToListId) return;
    
    // Add to list directly
    addToListMutation.mutate({ 
      listId: addToListId, 
      destinationId 
    });
  };

  const renderPriceLevel = (level: number | null | undefined) => {
    if (!level) return null;
    
    return (
      <div className="flex items-center">
        {Array(level).fill(0).map((_, i) => (
          <DollarSign key={i} size={16} className="text-green-600" />
        ))}
        {Array(4 - level).fill(0).map((_, i) => (
          <DollarSign key={i + level} size={16} className="text-gray-300" />
        ))}
      </div>
    );
  };

  return (
    <div className="bg-[#7dd3df] min-h-screen py-8">
      <div className="container max-w-6xl mx-auto">
        <div className="mb-8 text-center">
          <h1 className="text-4xl font-bold mb-2 text-gray-800">Local Travel Destinations</h1>
          <p className="text-lg text-gray-700">
            Discover amazing places to visit near you across the United States
          </p>
        </div>

        <div className="mb-8">
          <div className="bg-[#2d8a9a] text-gray-800 rounded-2xl p-6 md:p-10 shadow-lg">
            <div className="bg-white rounded-xl p-6 shadow-sm">
            <div className="mb-6">
              <h3 className="font-heading font-semibold text-2xl mb-3 text-neutral-700">Find Local Destinations</h3>
              <p className="text-neutral-600">Search for local attractions, parks, museums, and more based on your location</p>
            </div>
            
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="local-tabs grid w-full grid-cols-3" style={{ backgroundColor: '#2d8a9a', background: '#2d8a9a', color: 'white', borderColor: '#2d8a9a' }}>
                <TabsTrigger value="zipcode" className="data-[state=active]:bg-white data-[state=active]:text-[#2d8a9a] text-white">By Zip Code</TabsTrigger>
                <TabsTrigger value="state" className="data-[state=active]:bg-white data-[state=active]:text-[#2d8a9a] text-white">By State</TabsTrigger>
                <TabsTrigger value="category" className="data-[state=active]:bg-white data-[state=active]:text-[#2d8a9a] text-white">By Category</TabsTrigger>
              </TabsList>
              
              <TabsContent value="zipcode" className="mt-4 space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="col-span-2">
                    <Label htmlFor="zipcode">Enter US Zip Code</Label>
                    <Input 
                      id="zipcode"
                      placeholder="e.g. 10001" 
                      value={zipCode} 
                      onChange={(e) => setZipCode(e.target.value.slice(0, 5))}
                      maxLength={5}
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="radius">Search Radius (miles)</Label>
                    <Select value={radius} onValueChange={setRadius}>
                      <SelectTrigger id="radius" className="mt-1">
                        <SelectValue placeholder="Select radius" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="10">10 miles</SelectItem>
                        <SelectItem value="25">25 miles</SelectItem>
                        <SelectItem value="50">50 miles</SelectItem>
                        <SelectItem value="100">100 miles</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </TabsContent>
              
              <TabsContent value="state" className="mt-4">
                <Label htmlFor="state">Select State</Label>
                <Select value={selectedState} onValueChange={setSelectedState}>
                  <SelectTrigger id="state" className="mt-1">
                    <SelectValue placeholder="Select a state" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="AL">Alabama</SelectItem>
                    <SelectItem value="AK">Alaska</SelectItem>
                    <SelectItem value="AZ">Arizona</SelectItem>
                    <SelectItem value="AR">Arkansas</SelectItem>
                    <SelectItem value="CA">California</SelectItem>
                    <SelectItem value="CO">Colorado</SelectItem>
                    <SelectItem value="CT">Connecticut</SelectItem>
                    <SelectItem value="DE">Delaware</SelectItem>
                    <SelectItem value="DC">District of Columbia</SelectItem>
                    <SelectItem value="FL">Florida</SelectItem>
                    <SelectItem value="GA">Georgia</SelectItem>
                    <SelectItem value="HI">Hawaii</SelectItem>
                    <SelectItem value="ID">Idaho</SelectItem>
                    <SelectItem value="IL">Illinois</SelectItem>
                    <SelectItem value="IN">Indiana</SelectItem>
                    <SelectItem value="IA">Iowa</SelectItem>
                    <SelectItem value="KS">Kansas</SelectItem>
                    <SelectItem value="KY">Kentucky</SelectItem>
                    <SelectItem value="LA">Louisiana</SelectItem>
                    <SelectItem value="ME">Maine</SelectItem>
                    <SelectItem value="MD">Maryland</SelectItem>
                    <SelectItem value="MA">Massachusetts</SelectItem>
                    <SelectItem value="MI">Michigan</SelectItem>
                    <SelectItem value="MN">Minnesota</SelectItem>
                    <SelectItem value="MS">Mississippi</SelectItem>
                    <SelectItem value="MO">Missouri</SelectItem>
                    <SelectItem value="MT">Montana</SelectItem>
                    <SelectItem value="NE">Nebraska</SelectItem>
                    <SelectItem value="NV">Nevada</SelectItem>
                    <SelectItem value="NH">New Hampshire</SelectItem>
                    <SelectItem value="NJ">New Jersey</SelectItem>
                    <SelectItem value="NM">New Mexico</SelectItem>
                    <SelectItem value="NY">New York</SelectItem>
                    <SelectItem value="NC">North Carolina</SelectItem>
                    <SelectItem value="ND">North Dakota</SelectItem>
                    <SelectItem value="OH">Ohio</SelectItem>
                    <SelectItem value="OK">Oklahoma</SelectItem>
                    <SelectItem value="OR">Oregon</SelectItem>
                    <SelectItem value="PA">Pennsylvania</SelectItem>
                    <SelectItem value="RI">Rhode Island</SelectItem>
                    <SelectItem value="SC">South Carolina</SelectItem>
                    <SelectItem value="SD">South Dakota</SelectItem>
                    <SelectItem value="TN">Tennessee</SelectItem>
                    <SelectItem value="TX">Texas</SelectItem>
                    <SelectItem value="UT">Utah</SelectItem>
                    <SelectItem value="VT">Vermont</SelectItem>
                    <SelectItem value="VA">Virginia</SelectItem>
                    <SelectItem value="WA">Washington</SelectItem>
                    <SelectItem value="WV">West Virginia</SelectItem>
                    <SelectItem value="WI">Wisconsin</SelectItem>
                    <SelectItem value="WY">Wyoming</SelectItem>
                  </SelectContent>
                </Select>
              </TabsContent>
              
              <TabsContent value="category" className="mt-4">
                <Label htmlFor="category">Select Category</Label>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger id="category" className="mt-1">
                    <SelectValue placeholder="Select a category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="park">Parks</SelectItem>
                    <SelectItem value="museum">Museums</SelectItem>
                    <SelectItem value="beach">Beaches</SelectItem>
                    <SelectItem value="landmark">Landmarks</SelectItem>
                    <SelectItem value="historical">Historical Sites</SelectItem>
                    <SelectItem value="entertainment">Entertainment</SelectItem>
                    <SelectItem value="market">Markets</SelectItem>
                    <SelectItem value="restaurant">Restaurants</SelectItem>
                  </SelectContent>
                </Select>
              </TabsContent>
            </Tabs>
            
            <div className="mt-6 flex justify-center">
              <Button 
                onClick={handleSearch}
                disabled={isLoading}
                className="bg-gradient-primary hover:bg-primary/90 text-white font-medium py-3 px-8 rounded-lg transition-colors"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Searching...
                  </>
                ) : (
                  "Search Destinations"
                )}
              </Button>
            </div>
          </div>
        </div>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center py-12">
          <Loader2 className="h-12 w-12 animate-spin text-primary" />
        </div>
      ) : destinations && destinations.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
          {destinations.map((destination) => (
            <Card key={destination.id} className="overflow-hidden flex flex-col h-full">
              <div className="relative h-48 overflow-hidden">
                <img 
                  src={destination.imageUrl} 
                  alt={destination.name}
                  className="w-full h-full object-cover transition-transform hover:scale-105 duration-300"
                />
              </div>
              <CardHeader className="pb-2">
                <div className="flex justify-between items-start">
                  <CardTitle className="text-xl">{destination.name}</CardTitle>
                  {destination.rating && (
                    <Badge variant="outline" className="flex items-center gap-1 py-1">
                      <StarIcon className="h-3.5 w-3.5 text-yellow-500 fill-yellow-500" />
                      <span>{destination.rating.toFixed(1)}</span>
                    </Badge>
                  )}
                </div>
                <CardDescription className="flex items-center text-sm">
                  <MapPin className="h-3.5 w-3.5 mr-1 text-muted-foreground" />
                  {destination.city}, {destination.state}
                </CardDescription>
              </CardHeader>
              
              <CardContent className="pb-2 flex-grow">
                <p className="text-sm text-gray-600 mb-3 line-clamp-3">
                  {destination.description}
                </p>
                <div className="flex flex-wrap gap-1 mb-3">
                  {destination.tags.slice(0, 3).map((tag) => (
                    <Badge key={tag} variant="secondary" className="text-xs !bg-blue-100 !text-blue-800">
                      {tag}
                    </Badge>
                  ))}
                </div>
                <Separator className="my-2" />
                <div className="flex justify-between items-center text-sm text-muted-foreground">
                  <div className="flex items-center gap-1">
                    <Clock className="h-3.5 w-3.5" />
                    <span className="text-xs line-clamp-1 max-w-[150px]">
                      {destination.hoursOfOperation || "Hours not specified"}
                    </span>
                  </div>
                  <div>
                    {renderPriceLevel(destination.priceLevel)}
                  </div>
                </div>
              </CardContent>
              
              <CardFooter className="pt-2 flex flex-col gap-2">
                <div className="flex gap-2 w-full">
                  <Button variant="outline" className="flex-1 text-sm" asChild>
                    <a 
                      href={destination.websiteUrl || "#"} 
                      target="_blank" 
                      rel="noopener noreferrer"
                    >
                      Visit Website
                    </a>
                  </Button>
                  
                  {addToListId && (
                    <Button 
                      variant="secondary" 
                      className="flex-1"
                      onClick={() => {
                        setSelectedDestination(destination);
                        handleAddToList(destination.id);
                      }}
                    >
                      <ListPlus className="h-4 w-4 mr-2" />
                      Add to List
                    </Button>
                  )}
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      ) : destinations && destinations.length === 0 ? (
        <div className="text-center py-12 border rounded-lg my-8">
          <h3 className="text-xl font-medium mb-2">No destinations found</h3>
          <p className="text-muted-foreground">
            Try adjusting your search criteria or exploring a different area
          </p>
        </div>
      ) : null}

      {/* Success dialog */}
      <Dialog open={isAddToListDialogOpen} onOpenChange={setIsAddToListDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Destination Added!</DialogTitle>
            <DialogDescription>
              {selectedDestination?.name} has been added to your list.
            </DialogDescription>
          </DialogHeader>
          <div className="flex items-center justify-center py-4">
            <div className="bg-green-100 rounded-full p-3">
              <Check className="h-8 w-8 text-green-600" />
            </div>
          </div>
          <DialogFooter>
            <Button onClick={() => setIsAddToListDialogOpen(false)}>
              Continue Exploring
            </Button>
            <Button variant="outline" asChild>
              <Link to={`/user-lists/${addToListId}`}>
                Go to List
              </Link>
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}